require 'json'

class MinifyFactory
  
  def initialize
    @zpracovavanyRadek = ""
    @status =  {
          inComment: false
    } 
    #hash klicovych js slov, kazdy zaznam obsahuje 2 bool hodnoty - jestli zachovat mezeru pred a mezeru po
    @klicova_slova = JSON.parse($reserved_words)
  end
  
  
  def zpracujRadek(radek)
    @zpracovavanyRadek = radek
    vyresKomentare
    return @zpracovavanyRadek if @zpracovavanyRadek.empty?
    vyresMezery
    return @zpracovavanyRadek if @zpracovavanyRadek.empty?
    
    
    @zpracovavanyRadek
  end
  
  
  private 
  
  
  #zpracovává komentáře..
  def vyresKomentare
    #je v zakomentovaném
    if @status[:inComment] 
      if @zpracovavanyRadek.include?("*/") 
        @zpracovavanyRadek = @zpracovavanyRadek.split("*/").drop(1).join("*/")
        @status[:inComment] = false
        vyresKomentare if @zpracovavanyRadek.include?("/*")
      else
        @zpracovavanyRadek = ""
      end        
    #není v zakomentovaném
    else      
      @zpracovavanyRadek = (@zpracovavanyRadek.gsub!("/*", "*/") || @zpracovavanyRadek).split("*/")
      @status[:inComment] = (@zpracovavanyRadek.size%2==0)? true : false
      @zpracovavanyRadek = @zpracovavanyRadek.values_at(* @zpracovavanyRadek.each_index.select {|i| i.even?}).join(" ")
      #jednoradkove komenty
      if @zpracovavanyRadek.include?("//")
        @zpracovavanyRadek = @zpracovavanyRadek.split("//").first;
      end
    end
    
  end 

    #zpracovává bílé znaky.. 
  def vyresMezery
    # prazdne radky
    if @zpracovavanyRadek.strip.empty?
      @zpracovavanyRadek = ""
      return true    
    end
    
    #odstranime zbytecne mezery pred a za radkem
    @zpracovavanyRadek.strip!
    retezce_neretezce = rozdelRadekNaKodARetezce
    @zpracovavanyRadek = ""
    retezce_neretezce.each_with_index do |kod, i|
      
      #retezec, nesahat na nej
      if i%2!=0
        @zpracovavanyRadek+= " "+kod+" " || ''
      else   
        kod ||=""    
        kod = kod.split(/\s+/)
        kod.each do |word|
            #zacina slovem - je moznost pridat mezeru zleva
           if !(word =~ /^[\w]/).nil?
              vybrane = word.slice(0, (word.index( /[\W]/) || word.length  ) )
              @zpracovavanyRadek+=" " if (@klicova_slova.has_key?(vybrane) and (@klicova_slova["#{vybrane}"][0]))
            end
            
            @zpracovavanyRadek+= " "+word+" "
            
            #konci slovem - je moznost pridat mezeru zprava
            if !(word =~ /[\w]$/).nil?
              vybrane = word.slice( (word.rindex( /[\W]/) || -1 )+1, word.length )
              @zpracovavanyRadek+=" " if (@klicova_slova.has_key?(vybrane) and (@klicova_slova["#{vybrane}"][1]))
            end
        end     
      end
    end    
  end
  
  #vraci pole kodu rozdeleneho na retezce a kod - kod je v lichych, retezce v sudych cislech pole
  def rozdelRadekNaKodARetezce
    retezce_neretezce = []
    aktualni_oddelovac = nil
    indexVPoli = 0
    retezce_neretezce[indexVPoli]||=""
    konec_regexu = 0
    @zpracovavanyRadek.split("").each_with_index do |c, i|
      #regexy
      if(aktualni_oddelovac.nil? and i < konec_regexu) 
        next
      end         
      if aktualni_oddelovac.nil? 
        if(c=="/")   
          konec_regexu = @zpracovavanyRadek.index(/[\/][mgi]{0,3}\s*[;),]/, i)
          if konec_regexu.nil?
            #asi šlo o dělení nebo něco jiného co má v sobě /
            retezce_neretezce[indexVPoli]+=c
            konec_regexu = 0
          else
            retezce_neretezce[indexVPoli+1] = @zpracovavanyRadek.slice(i, konec_regexu-i)
            konec_regexu+=2
            indexVPoli+=2
          end
        end
      end
      #zacina retezec
      if aktualni_oddelovac.nil? and (c=="'" or c == '"')          
          indexVPoli+=1     
        retezce_neretezce[indexVPoli]||=""
        retezce_neretezce[indexVPoli]+= c
        aktualni_oddelovac = c
      #pokracuje retezec
      elsif aktualni_oddelovac.nil? or aktualni_oddelovac!=c
        retezce_neretezce[indexVPoli]||=""
        retezce_neretezce[indexVPoli]+= c
      #konci retezec
      else         
          retezce_neretezce[indexVPoli]+= c
          indexVPoli+=1
          aktualni_oddelovac = nil
      end
    end
    retezce_neretezce
  end
  
end
